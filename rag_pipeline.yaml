apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: rag-summarization-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.22, pipelines.kubeflow.org/pipeline_compilation_time: '2025-04-20T14:49:14.999839',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Summarize input text using
      a transformer", "inputs": [{"name": "text", "type": "String"}], "name": "rag-summarization-pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.22}
spec:
  entrypoint: rag-summarization-pipeline
  templates:
  - name: rag-summarization-pipeline
    inputs:
      parameters:
      - {name: text}
    dag:
      tasks:
      - name: summarize-text
        template: summarize-text
        arguments:
          parameters:
          - {name: text, value: '{{inputs.parameters.text}}'}
  - name: summarize-text
    container:
      args: [--text, '{{inputs.parameters.text}}', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'transformers' 'torch' 'textwrap3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3
        -m pip install --quiet --no-warn-script-location 'transformers' 'torch' 'textwrap3'
        --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def summarize_text(text):
            from transformers import pipeline
            import textwrap

            summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
            chunks = textwrap.wrap(text, 2000, break_long_words=False, break_on_hyphens=False)

            summaries = []
            for chunk in chunks:
                result = summarizer(chunk, max_length=512, min_length=100, do_sample=False)
                summaries.append(result[0]["summary_text"])

            return " ".join(summaries)

        def _serialize_str(str_value: str) -> str:
            if not isinstance(str_value, str):
                raise TypeError('Value "{}" has type "{}" instead of str.'.format(
                    str(str_value), str(type(str_value))))
            return str_value

        import argparse
        _parser = argparse.ArgumentParser(prog='Summarize text', description='')
        _parser.add_argument("--text", dest="text", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = summarize_text(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_str,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.9
    inputs:
      parameters:
      - {name: text}
    outputs:
      artifacts:
      - {name: summarize-text-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.22
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--text", {"inputValue": "text"}, "----output-paths", {"outputPath":
          "Output"}], "command": ["sh", "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3
          -m pip install --quiet --no-warn-script-location ''transformers'' ''torch''
          ''textwrap3'' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
          --quiet --no-warn-script-location ''transformers'' ''torch'' ''textwrap3''
          --user) && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def summarize_text(text):\n    from transformers import pipeline\n    import
          textwrap\n\n    summarizer = pipeline(\"summarization\", model=\"facebook/bart-large-cnn\")\n    chunks
          = textwrap.wrap(text, 2000, break_long_words=False, break_on_hyphens=False)\n\n    summaries
          = []\n    for chunk in chunks:\n        result = summarizer(chunk, max_length=512,
          min_length=100, do_sample=False)\n        summaries.append(result[0][\"summary_text\"])\n\n    return
          \" \".join(summaries)\n\ndef _serialize_str(str_value: str) -> str:\n    if
          not isinstance(str_value, str):\n        raise TypeError(''Value \"{}\"
          has type \"{}\" instead of str.''.format(\n            str(str_value), str(type(str_value))))\n    return
          str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Summarize
          text'', description='''')\n_parser.add_argument(\"--text\", dest=\"text\",
          type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = summarize_text(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.9"}}, "inputs": [{"name": "text", "type": "String"}],
          "name": "Summarize text", "outputs": [{"name": "Output", "type": "String"}]}',
        pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/arguments.parameters: '{"text":
          "{{inputs.parameters.text}}"}'}
  arguments:
    parameters:
    - {name: text}
  serviceAccountName: pipeline-runner
